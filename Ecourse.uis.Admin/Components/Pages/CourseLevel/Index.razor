@page "/courselevel/index"
@using ECourse.Admin.Models
@using ECourse.Admin.Models.CourseAPI.CourseLevel
@using ECourse.Admin.Service.CourseAPI;
@using Newtonsoft.Json;
@inject NavigationManager navManager;
@inject ICourseLevelService service;
@inject NotificationService NotificationService;
@inject Radzen.DialogService DialogService;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer
<PageTitle>Course Level</PageTitle>
<h3>Course Level</h3>
<hr />
<div class="row-fluid">
    <button class="btn btn-success" disabled="@IsCreatbuttonDisabled" onclick="@CreateAsync">Add New Item <i class="bi-plus-circle"></i> </button>
    <button class="btn btn-primary" disabled="@IsEditbuttonDisabled" onclick="@Edit">Edit<i class="bi-pencil-square"></i></button>
    <button class="btn btn-danger" disabled="@IsDeletebuttonDisabled" onclick="@Del">Remove <i class="bi-x-circle"></i></button>
</div>
<RadzenDataGrid @ref="grid" @bind-Value=@selecteditems SelectionMode="DataGridSelectionMode.Multiple" KeyProperty="Id" IsLoading="@isLoading" Count="@count" Data="@items"
LoadData="@LoadData" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat"
FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="20" PageSizeOptions="@pageSizeOptions"
PagerHorizontalAlign="HorizontalAlign.Center" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})" Change="@(args => selecteditems = args == true?(selecteditems ??Enumerable.Empty<CourseLevelDto>()).Union(items.Where(i => !(selecteditems ?? Enumerable.Empty<CourseLevelDto>()).Select(e => e.Id).Contains(i.Id))).ToList() : null)"
                Value="@(selecteditems == null || selecteditems?.Any() != true ? false : !items.All(i => selecteditems.Select(e => e.Id).Contains(i.Id)) ? null : items.Any(i => selecteditems.Select(e => e.Id).Contains(i.Id)))" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TriState="false" Value="@(selecteditems != null && selecteditems.Select(e => e.Id).Contains(data.Id))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                TValue="bool" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Title" Title="Title" Width="80px" />
        <RadzenDataGridColumn Title="Icon" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <img src="@data.Icon" alt="@data.Title" class="rz-gravatar" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="FileName" title="File Name" Width="150px" />
        <RadzenDataGridColumn Property="FileLocation" title="File Location" Width="150px" />
        <RadzenDataGridColumn Property="CreateDateTime" Title="Create DateTime" FormatString="{0:dd/MM/yyyy HH:mm}" TextAlign="TextAlign.Center" Width="100px" />
        <RadzenDataGridColumn Property="ModifiedDateTime" Title="Modified DateTime" FormatString="{0:dd/MM/yyyy HH:mm}" TextAlign="TextAlign.Center" Width="100px" />
    </Columns>
    <LoadingTemplate>
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </LoadingTemplate>
</RadzenDataGrid>


@code {
    IEnumerable<CourseLevelDto> items;
    IList<CourseLevelDto> selecteditems;
    RadzenDataGrid<CourseLevelDto> grid;
    public string message { get; set; }
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 50 };
    GridQuery query = new();
    bool isLoading = false;
    int count = 0;
    private bool IsCreatbuttonDisabled => !(selecteditems == null || selecteditems.Count == 0);
    private bool IsEditbuttonDisabled => selecteditems == null || selecteditems.Count != 1;
    private bool IsDeletebuttonDisabled => selecteditems == null || selecteditems.Count == 0;
    string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>"; 
    protected override async Task OnInitializedAsync()
    {
        
        await base.OnInitializedAsync();
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            message = await LocalStorage.GetItemAsync<string>("message");
            if (!string.IsNullOrEmpty(message))
            {
               
                if (message == "create")
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Course Level", "Item successfully created.", 4000);
                }
                if (message == "update")
                {
                    NotificationService.Notify(NotificationSeverity.Info, "Course Level", "Item successfully updated.", 4000);
                }
                await LocalStorage.RemoveItemAsync("message");
            }
        }
      
    }
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        query.Filter = args.Filter;
        query.SortColumn = args.OrderBy?.Split(' ')[0] ?? "Name";
        query.SortOrder = args.OrderBy?.EndsWith("desc") == true ? "desc" : "asc";
        query.FilterColumn = args.Filters?.FirstOrDefault()?.Property ?? "";
        query.FilterValue = args.Filters?.FirstOrDefault()?.FilterValue?.ToString() ?? "";
        query.Skip = args.Skip;
        query.Top = args.Top;
        query.Page = args.Skip / args.Top + 1;
        var response = await service.GetGrid(query);
        // Update the Data property
        //** performance issue check it later*/
        items = JsonConvert.DeserializeObject<IEnumerable<CourseLevelDto>>(Convert.ToString(response.Result));
        // Update the count
        count = response.Count;

        isLoading = false;
    }
    private async Task CreateAsync()
    {        
        navManager.NavigateTo("/courselevel/create");
    }
    private void Edit()
    {
        if (selecteditems == null || selecteditems.Count > 1)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "warning!!", "select just one row", 4000);
            return;
        }
        var row = selecteditems.FirstOrDefault();
        if (row != null)
        {
            navManager.NavigateTo("/courselevel/edit/" + row.Id);
        }

    }
    private async void Del()
    {
        if (selecteditems == null || selecteditems.Count == 0)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "warning!!", "select just one row", 4000);
            return;
        }
        else
        {
            var rows = selecteditems.ToList();
            ResponseDto? response = new();
            //confirm
            bool? confirmed = await DialogService.Confirm("Are you sure?", "Delete Alert", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
            if (confirmed is null || confirmed.Value == false)
            {
                return;
            }
            if (rows.Count == 1)
            {
                response = await service.DeleteAsync(rows[0].Id);
            }
            else if (rows.Count > 1)
            {
                List<string> ids = rows.Select(x => x.Id).ToList();
                response = await service.DeleteAsync(ids);
            }
            if (response is null || response.IsSuccess == false)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error!!", "delete(s) operation failed", 4000);
                return;
            }
            else if (response.IsSuccess)
            {
                await grid.Reload();
                NotificationService.Notify(NotificationSeverity.Info, response.Message);
                return;
            }
        }

    }     
}
